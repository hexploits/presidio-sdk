package com.hexploits.oss.sdk.presidio.anonymizer;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockserver.integration.ClientAndServer.startClientAndServer;
import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;

import com.hexploits.oss.sdk.presidio.analyzer.AnalyzeResponse;
import com.hexploits.oss.sdk.presidio.anonymizer.strategy.AnonymizerStrategy;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockserver.integration.ClientAndServer;

class PresidioAnonymizerClientTest {

    private static final String LOCALHOST = "http://localhost:1080";
    private static final String ANONYMIZE_PATH = "/anonymize";
    private static final String DEANONYMIZE_PATH = "/deanonymize";
    private static final String ANONYMIZERS_PATH = "/anonymizers";
    private static final String DEANONYMIZERS_PATH = "/deanonymizers";
    private static final String SAMPLE_TEXT = "Sample text";
    private static final String ANONYMIZED_TEXT = "{\"text\":\"anonymized\"}";
    private static final String DEANONYMIZED_TEXT = "{\"text\":\"deanonymized\"}";
    private static final String ANONYMIZERS_RESPONSE = "[\"anonymizer1\", \"anonymizer2\"]";
    private static final String DEANONYMIZERS_RESPONSE = "[\"deanonymizer1\", \"deanonymizer2\"]";

    private ClientAndServer mockServer;
    private PresidioAnonymizerClient client;

    @BeforeEach
    void setUp() {
        mockServer = startClientAndServer(1080);
        PresidioAnonymizerClient.PresidioAnonymizerClientDetails details = new PresidioAnonymizerClient.PresidioAnonymizerClientDetails(LOCALHOST);
        client = new PresidioAnonymizerClient(details);
    }

    @AfterEach
    void tearDown() {
        mockServer.stop();
    }

    private void mockPostRequest(String path, String responseBody) {
        mockServer.when(
          request()
            .withMethod("POST")
            .withPath(path)
        ).respond(
          response()
            .withStatusCode(200)
            .withHeader("Content-Type", "application/json")
            .withBody(responseBody)
        );
    }

    private void mockGetRequest(String path, String responseBody) {
        mockServer.when(
          request()
            .withMethod("GET")
            .withPath(path)
        ).respond(
          response()
            .withStatusCode(200)
            .withHeader("Content-Type", "application/json")
            .withBody(responseBody)
        );
    }

    @Test
    void testAnonymizeRequest() throws IOException {
        AnonymizeRequest request = new AnonymizeRequest("My location in Wales, UK", List.of(), Map.of());
        mockPostRequest(ANONYMIZE_PATH, ANONYMIZED_TEXT);

        AnonymizeResponse response = client.anonymize(request);

        assertNotNull(response);
        assertEquals("anonymized", response.text());
    }

    @Test
    void testAnonymizeWithAnalyzeResponse() throws IOException {
        AnalyzeResponse analyzeResponse = new AnalyzeResponse("explanation", null, "ENTITY", 0.9, 0, 10);
        mockPostRequest(ANONYMIZE_PATH, ANONYMIZED_TEXT);

        AnonymizeResponse response = client.anonymize(SAMPLE_TEXT, List.of(analyzeResponse));

        assertNotNull(response);
        assertEquals("anonymized", response.text());
    }

    @Test
    void testAnonymizeWithAnalyzeResponseAndAnonymizers() throws IOException {
        AnalyzeResponse analyzeResponse = new AnalyzeResponse("explanation", null, "ENTITY", 0.9, 0, 10);
        AnonymizerStrategy anonymizerStrategy = () -> "strategy";
        mockPostRequest(ANONYMIZE_PATH, ANONYMIZED_TEXT);

        AnonymizeResponse response = client.anonymize(SAMPLE_TEXT, List.of(analyzeResponse), Map.of("ENTITY", anonymizerStrategy));

        assertNotNull(response);
        assertEquals("anonymized", response.text());
    }

    @Test
    void testDeanonymizeRequest() throws IOException {
        DeanonymizeRequest request = new DeanonymizeRequest(SAMPLE_TEXT, Map.of(), List.of());
        mockPostRequest(DEANONYMIZE_PATH, DEANONYMIZED_TEXT);

        DeanonymizeResponse response = client.deanonymize(request);

        assertNotNull(response);
        assertEquals("deanonymized", response.text());
    }

    @Test
    void testGetAnonymizers() throws IOException {
        mockGetRequest(ANONYMIZERS_PATH, ANONYMIZERS_RESPONSE);

        List<String> actualAnonymizers = client.getAnonymizers();

        assertNotNull(actualAnonymizers);
        assertEquals(List.of("anonymizer1", "anonymizer2"), actualAnonymizers);
    }

    @Test
    void testGetDeanonymizers() throws IOException {
        mockGetRequest(DEANONYMIZERS_PATH, DEANONYMIZERS_RESPONSE);

        List<String> actualDeanonymizers = client.getDeanonymizers();

        assertNotNull(actualDeanonymizers);
        assertEquals(List.of("deanonymizer1", "deanonymizer2"), actualDeanonymizers);
    }

    @Test
    void testAnonymizeContentThrowsIOException() {
        AnonymizeRequest request = new AnonymizeRequest(SAMPLE_TEXT, List.of(), Map.of());
        mockServer.when(
          request()
            .withMethod("POST")
            .withPath(ANONYMIZE_PATH)
        ).respond(
          response()
            .withStatusCode(500)
        );

        assertThrows(IOException.class, () -> client.anonymize(request));
    }

    @Test
    void testDeanonymizeContentThrowsIOException() {
        DeanonymizeRequest request = new DeanonymizeRequest(SAMPLE_TEXT, Map.of(), List.of());
        mockServer.when(
          request()
            .withMethod("POST")
            .withPath(DEANONYMIZE_PATH)
        ).respond(
          response()
            .withStatusCode(500)
        );

        assertThrows(IOException.class, () -> client.deanonymize(request));
    }

    @Test
    void testGetAnonymizersThrowsHttpResponseException() {
        mockServer.when(
          request()
            .withMethod("GET")
            .withPath(ANONYMIZERS_PATH)
        ).respond(
          response()
            .withStatusCode(500)
        );

        assertThrows(IOException.class, () -> client.getAnonymizers());
    }

    @Test
    void testGetDeanonymizersThrowsHttpResponseException() {
        mockServer.when(
          request()
            .withMethod("GET")
            .withPath(DEANONYMIZERS_PATH)
        ).respond(
          response()
            .withStatusCode(500)
        );

        assertThrows(IOException.class, () -> client.getDeanonymizers());
    }
}