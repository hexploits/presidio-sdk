package com.hexploits.oss.sdk.presidio.anonymizer;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import com.hexploits.oss.sdk.presidio.anonymizer.deanonymize.DecryptAnonymizer;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;

class DeanonymizeRequestTest {

    @Test
    void testDeanonymizeRequestCreation() {
        DecryptAnonymizer decryptAnonymizer = new DecryptAnonymizer("1111111111111111");
        OperatorResult operatorResult = new OperatorResult("decrypt", "LOCATION", 40, 46, "London");
        List<OperatorResult> items = List.of(operatorResult);
        Map<String, DecryptAnonymizer> deanonymizers = Map.of("DEFAULT", decryptAnonymizer);

        DeanonymizeRequest request = new DeanonymizeRequest("Sample text", deanonymizers, items);

        assertNotNull(request);
        assertEquals("Sample text", request.text());
        assertEquals(deanonymizers, request.deanonymizers());
        assertEquals(items, request.anonymizerResults());
    }

    @Test
    void testDeanonymizeRequestWithEmptyItems() {
        DecryptAnonymizer decryptAnonymizer = new DecryptAnonymizer("1111111111111111");
        List<OperatorResult> items = List.of();
        Map<String, DecryptAnonymizer> deanonymizers = Map.of("DEFAULT", decryptAnonymizer);

        DeanonymizeRequest request = new DeanonymizeRequest("Sample text", deanonymizers, items);

        assertNotNull(request);
        assertEquals("Sample text", request.text());
        assertEquals(deanonymizers, request.deanonymizers());
        assertTrue(request.anonymizerResults().isEmpty());
    }

    @Test
    void testDeanonymizeRequestWithNullItems() {
        DecryptAnonymizer decryptAnonymizer = new DecryptAnonymizer("1111111111111111");
        Map<String, DecryptAnonymizer> deanonymizers = Map.of("DEFAULT", decryptAnonymizer);

        assertThrows(NullPointerException.class, () -> new DeanonymizeRequest("Sample text", deanonymizers, null));
    }

    @Test
    void testDeanonymizeRequestWithNullDeanonymizers() {
        OperatorResult operatorResult = new OperatorResult("decrypt", "LOCATION", 40, 46, "London");
        List<OperatorResult> items = List.of(operatorResult);

        assertThrows(NullPointerException.class, () -> new DeanonymizeRequest("Sample text", null, items));
    }

    @Test
    void testDeanonymizeRequestEquality() {
        DecryptAnonymizer decryptAnonymizer = new DecryptAnonymizer("1111111111111111");
        OperatorResult operatorResult = new OperatorResult("decrypt", "LOCATION", 40, 46, "London");
        List<OperatorResult> items = List.of(operatorResult);
        Map<String, DecryptAnonymizer> deanonymizers = Map.of("DEFAULT", decryptAnonymizer);

        DeanonymizeRequest request1 = new DeanonymizeRequest("Sample text", deanonymizers, items);
        DeanonymizeRequest request2 = new DeanonymizeRequest("Sample text", deanonymizers, items);

        assertEquals(request1, request2);
        assertEquals(request1.hashCode(), request2.hashCode());
    }

    @Test
    void testDeanonymizeRequestInequality() {
        DecryptAnonymizer decryptAnonymizer = new DecryptAnonymizer("1111111111111111");
        OperatorResult operatorResult = new OperatorResult("decrypt", "LOCATION", 40, 46, "London");
        List<OperatorResult> items = List.of(operatorResult);
        Map<String, DecryptAnonymizer> deanonymizers = Map.of("DEFAULT", decryptAnonymizer);

        DeanonymizeRequest request1 = new DeanonymizeRequest("Sample text", deanonymizers, items);
        DeanonymizeRequest request2 = new DeanonymizeRequest("Different text", deanonymizers, items);

        assertNotEquals(request1, request2);
    }
}