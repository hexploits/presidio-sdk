package com.hexploits.oss.sdk.presidio.anonymizer;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;
import org.junit.jupiter.api.Test;

class AnonymizeResponseTest {

    @Test
    void testAnonymizeResponseCreation() {
        OperatorResult operatorResult1 = new OperatorResult("encrypt", "LOCATION", 40, 46, "encryptedText1");
        OperatorResult operatorResult2 = new OperatorResult("encrypt", "PERSON", 11, 28, "encryptedText2");
        List<OperatorResult> items = List.of(operatorResult1, operatorResult2);

        AnonymizeResponse response = new AnonymizeResponse("Sample text", items);

        assertNotNull(response);
        assertEquals("Sample text", response.text());
        assertEquals(2, response.items().size());
        assertEquals(operatorResult1, response.items().get(0));
        assertEquals(operatorResult2, response.items().get(1));
    }

    @Test
    void testAnonymizeResponseWithEmptyItems() {
        List<OperatorResult> items = List.of();

        AnonymizeResponse response = new AnonymizeResponse("Sample text", items);

        assertNotNull(response);
        assertEquals("Sample text", response.text());
        assertTrue(response.items().isEmpty());
    }

    @Test
    void testAnonymizeResponseWithNullItems() {
        AnonymizeResponse response = new AnonymizeResponse("Sample text", null);

        assertNotNull(response);
        assertEquals("Sample text", response.text());
        assertNull(response.items());
    }

    @Test
    void testAnonymizeResponseEquality() {
        OperatorResult operatorResult1 = new OperatorResult("encrypt", "LOCATION", 40, 46, "encryptedText1");
        List<OperatorResult> items = List.of(operatorResult1);

        AnonymizeResponse response1 = new AnonymizeResponse("Sample text", items);
        AnonymizeResponse response2 = new AnonymizeResponse("Sample text", items);

        assertEquals(response1, response2);
        assertEquals(response1.hashCode(), response2.hashCode());
    }

    @Test
    void testAnonymizeResponseInequality() {
        OperatorResult operatorResult1 = new OperatorResult("encrypt", "LOCATION", 40, 46, "encryptedText1");
        List<OperatorResult> items1 = List.of(operatorResult1);
        List<OperatorResult> items2 = List.of();

        AnonymizeResponse response1 = new AnonymizeResponse("Sample text", items1);
        AnonymizeResponse response2 = new AnonymizeResponse("Different text", items2);

        assertNotEquals(response1, response2);
    }
}