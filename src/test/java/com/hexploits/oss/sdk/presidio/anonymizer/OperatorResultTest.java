package com.hexploits.oss.sdk.presidio.anonymizer;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.Test;

class OperatorResultTest {

    @Test
    void testOperatorResultCreation() {
        OperatorResult result = new OperatorResult("encrypt", "LOCATION", 40, 46, "encryptedText");

        assertNotNull(result);
        assertEquals("encrypt", result.operator());
        assertEquals("LOCATION", result.entityType());
        assertEquals(40, result.start());
        assertEquals(46, result.end());
        assertEquals("encryptedText", result.text());
    }

    @Test
    void testOperatorResultWithNullText() {
        OperatorResult result = new OperatorResult("encrypt", "LOCATION", 40, 46, null);

        assertNotNull(result);
        assertEquals("encrypt", result.operator());
        assertEquals("LOCATION", result.entityType());
        assertEquals(40, result.start());
        assertEquals(46, result.end());
        assertNull(result.text());
    }

    @Test
    void testOperatorResultWithNullEntityType() {
        assertThrows(NullPointerException.class, () -> {
            new OperatorResult("encrypt", null, 40, 46, "encryptedText");
        });
    }

    @Test
    void testOperatorResultEquality() {
        OperatorResult result1 = new OperatorResult("encrypt", "LOCATION", 40, 46, "encryptedText");
        OperatorResult result2 = new OperatorResult("encrypt", "LOCATION", 40, 46, "encryptedText");

        assertEquals(result1, result2);
        assertEquals(result1.hashCode(), result2.hashCode());
    }

    @Test
    void testOperatorResultInequality() {
        OperatorResult result1 = new OperatorResult("encrypt", "LOCATION", 40, 46, "encryptedText");
        OperatorResult result2 = new OperatorResult("decrypt", "LOCATION", 40, 46, "encryptedText");

        assertNotEquals(result1, result2);
    }
}