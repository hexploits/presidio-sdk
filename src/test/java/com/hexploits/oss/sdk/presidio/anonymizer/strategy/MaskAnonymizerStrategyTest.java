package com.hexploits.oss.sdk.presidio.anonymizer.strategy;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;

class MaskAnonymizerStrategyTest {

    @Test
    void testGetType() {
        MaskAnonymizerStrategy strategy = new MaskAnonymizerStrategy("*", 4, true);
        assertEquals("mask", strategy.getType());
    }

    @Test
    void testGetMaskingChar() {
        MaskAnonymizerStrategy strategy = new MaskAnonymizerStrategy("*", 4, true);
        assertEquals("*", strategy.getMaskingChar());
    }

    @Test
    void testGetCharsToMask() {
        MaskAnonymizerStrategy strategy = new MaskAnonymizerStrategy("*", 4, true);
        assertEquals(4, strategy.getCharsToMask());
    }

    @Test
    void testIsFromEnd() {
        MaskAnonymizerStrategy strategy = new MaskAnonymizerStrategy("*", 4, true);
        assertTrue(strategy.isFromEnd());
    }

    @Test
    void testIsNotFromEnd() {
        MaskAnonymizerStrategy strategy = new MaskAnonymizerStrategy("*", 4, false);
        assertFalse(strategy.isFromEnd());
    }

    @Test
    void testConstructorWithValidParameters() {
        MaskAnonymizerStrategy strategy = new MaskAnonymizerStrategy("#", 3, false);
        assertEquals("#", strategy.getMaskingChar());
        assertEquals(3, strategy.getCharsToMask());
        assertFalse(strategy.isFromEnd());
    }

    @Test
    void testConstructorWithZeroCharsToMask() {
        MaskAnonymizerStrategy strategy = new MaskAnonymizerStrategy("#", 0, false);
        assertEquals("#", strategy.getMaskingChar());
        assertEquals(0, strategy.getCharsToMask());
        assertFalse(strategy.isFromEnd());
    }

    @Test
    void testConstructorWithNegativeCharsToMask() {
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> new MaskAnonymizerStrategy("#", -1, false));
        assertEquals("charsToMask cannot be negative", exception.getMessage());
    }
}