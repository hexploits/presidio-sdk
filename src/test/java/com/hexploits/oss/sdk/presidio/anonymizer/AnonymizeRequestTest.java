package com.hexploits.oss.sdk.presidio.anonymizer;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

import com.hexploits.oss.sdk.presidio.anonymizer.AnonymizeRequest.AnalyzerResult;
import com.hexploits.oss.sdk.presidio.anonymizer.strategy.AnonymizerStrategy;
import java.util.Collections;
import java.util.Map;
import org.junit.jupiter.api.Test;

class AnonymizeRequestTest {

    @Test
    void testAnonymizeRequestBuilderWithAddMethods() {
        String text = "Sample text";
        AnalyzerResult analyzerResult = AnalyzerResult.builder()
          .setEntityType("PERSON")
          .setStart(0)
          .setEnd(11)
          .setScore(0.99)
          .build();
        AnonymizerStrategy anonymizerStrategy = () -> "DEFAULT";

        AnonymizeRequest request = AnonymizeRequest.builder()
          .setText(text)
          .addAnalyzerResult(analyzerResult)
          .addAnonymizer("DEFAULT", anonymizerStrategy)
          .build();

        assertNotNull(request);
        assertEquals(text, request.text());
        assertEquals(1, request.analyzerResults().size());
        assertEquals(analyzerResult, request.analyzerResults().get(0));
        assertEquals(1, request.anonymizers().size());
        assertEquals(anonymizerStrategy, request.anonymizers().get("DEFAULT"));
    }

    @Test
    void testAnonymizeRequestBuilderWithSetMethods() {
        String text = "Sample text";
        AnalyzerResult analyzerResult = AnalyzerResult.builder()
          .setEntityType("PERSON")
          .setStart(0)
          .setEnd(11)
          .setScore(0.99)
          .build();
        AnonymizerStrategy anonymizerStrategy = () -> "DEFAULT";

        AnonymizeRequest request = AnonymizeRequest.builder()
          .setText(text)
          .setAnalyzerResults(Collections.singletonList(analyzerResult))
          .setAnonymizers(Map.of("DEFAULT", anonymizerStrategy))
          .build();

        assertNotNull(request);
        assertEquals(text, request.text());
        assertEquals(1, request.analyzerResults().size());
        assertEquals(analyzerResult, request.analyzerResults().get(0));
        assertEquals(1, request.anonymizers().size());
        assertEquals(anonymizerStrategy, request.anonymizers().get("DEFAULT"));
    }

    @Test
    void testAnonymizeRequestBuilderWithNullText() {
        AnonymizeRequest.Builder builder = AnonymizeRequest.builder();

        Exception exception = assertThrows(IllegalStateException.class, builder::build);
        assertEquals("text is required", exception.getMessage());
    }

    @Test
    void testAnonymizeRequestBuilderWithEmptyText() {
        AnonymizeRequest.Builder builder = AnonymizeRequest.builder()
          .setText("");

        Exception exception = assertThrows(IllegalStateException.class, builder::build);
        assertEquals("text is required", exception.getMessage());
    }

    @Test
    void testAnonymizeRequestBuilderWithEmptyAnalyzerResults() {
        AnonymizeRequest.Builder builder = AnonymizeRequest.builder()
          .setText("Sample text");

        Exception exception = assertThrows(IllegalStateException.class, builder::build);
        assertEquals("analyzerResults is required", exception.getMessage());
    }

    @Test
    void testAnonymizeRequestBuilderWithNullAnonymizers() {
        AnalyzerResult analyzerResult = AnalyzerResult.builder()
          .setEntityType("PERSON")
          .setStart(0)
          .setEnd(11)
          .setScore(0.99)
          .build();
        AnonymizeRequest.Builder builder = AnonymizeRequest.builder()
          .setText("Sample text")
          .setAnalyzerResults(Collections.singletonList(analyzerResult));

        Exception exception = assertThrows(IllegalStateException.class, builder::build);
        assertEquals("anonymizers is required", exception.getMessage());
    }

    @Test
    void testAnalyzerResultBuilder() {
        AnalyzerResult analyzerResult = AnalyzerResult.builder()
          .setEntityType("PERSON")
          .setStart(0)
          .setEnd(11)
          .setScore(0.99)
          .build();

        assertNotNull(analyzerResult);
        assertEquals("PERSON", analyzerResult.entityType());
        assertEquals(0, analyzerResult.start());
        assertEquals(11, analyzerResult.end());
        assertEquals(0.99, analyzerResult.score());
    }

    @Test
    void testAnalyzerResultBuilderWithNullEntityType() {
        AnalyzerResult.AnalyzerResultBuilder builder = AnalyzerResult.builder()
          .setStart(0)
          .setEnd(11)
          .setScore(0.99);
        Exception exception = assertThrows(IllegalStateException.class, builder::build);
        assertEquals("entityType is required", exception.getMessage());
    }

    @Test
    void testAnalyzerResultBuilderWithNullStart() {
        AnalyzerResult.AnalyzerResultBuilder builder = AnalyzerResult.builder()
          .setEntityType("PERSON")
          .setEnd(11)
          .setScore(0.99);
        Exception exception = assertThrows(IllegalStateException.class, builder::build);
        assertEquals("start is required", exception.getMessage());
    }

    @Test
    void testAnalyzerResultBuilderWithNullEnd() {
        AnalyzerResult.AnalyzerResultBuilder builder = AnalyzerResult.builder()
          .setEntityType("PERSON")
          .setStart(0)
          .setScore(0.99);
        Exception exception = assertThrows(IllegalStateException.class, builder::build);
        assertEquals("end is required", exception.getMessage());
    }

    @Test
    void testAnalyzerResultBuilderWithNullScore() {
        AnalyzerResult.AnalyzerResultBuilder builder = AnalyzerResult.builder()
          .setEntityType("PERSON")
          .setStart(0)
          .setEnd(11);
        Exception exception = assertThrows(IllegalStateException.class, builder::build);
        assertEquals("score is required", exception.getMessage());
    }
}