package com.hexploits.oss.sdk.presidio.analyzer;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

import com.hexploits.oss.sdk.presidio.analyzer.AnalyzeRequest.AdHocRecognizers;
import java.io.IOException;
import java.util.List;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockserver.client.MockServerClient;
import org.mockserver.integration.ClientAndServer;
import org.mockserver.model.HttpRequest;
import org.mockserver.model.HttpResponse;

class PresidioAnalyzerClientTest {

    private ClientAndServer mockServer;
    private PresidioAnalyzerClient presidioAnalyzerClient;

    @BeforeEach
    void setUp() {
        mockServer = ClientAndServer.startClientAndServer(8080);
        presidioAnalyzerClient = new PresidioAnalyzerClient(new PresidioAnalyzerClient.PresidioAnalyzerClientDetails("http://localhost:8080"));
    }

    @AfterEach
    void tearDown() {
        mockServer.stop();
    }

    @Test
    void testAnalyze() throws IOException {
        try (MockServerClient client = new MockServerClient("localhost", 8080)) {
            client.when(HttpRequest.request().withMethod("POST").withPath("/analyze"))
              .respond(HttpResponse.response()
                .withStatusCode(200)
                .withHeader("Content-Type", "application/json")
                .withBody(
                  "[{\"analysis_explanation\":null,\"recognition_metadata\":{\"recognizer_identifier\":\"recognizerIdentifier\",\"recognizer_name\":\"recognizerName\"},\"entity_type\":\"field2\",\"score\":0.5,\"start\":1,\"end\":2}]"));

            AdHocRecognizers adHocRecognizer = new AdHocRecognizers("name", "supportedLanguage", List.of(), List.of(), List.of(), "supportedEntity");
            AnalyzeRequest request = new AnalyzeRequest("field1", "field2", "field3", 0.5, List.of("item1"), true, List.of(adHocRecognizer), List.of("item2"));

            List<AnalyzeResponse> responses = presidioAnalyzerClient.analyze(request);

            assertNotNull(responses);
            assertEquals(1, responses.size());
        }
    }

    @Test
    void testGetRecognizers() throws IOException {
        try (MockServerClient client = new MockServerClient("localhost", 8080)) {
            client.when(HttpRequest.request().withMethod("GET").withPath("/recognizers"))
              .respond(HttpResponse.response()
                .withStatusCode(200)
                .withHeader("Content-Type", "application/json")
                .withBody("[\"Recognizer1\", \"Recognizer2\"]"));

            List<String> recognizers = presidioAnalyzerClient.getRecognizers();

            assertNotNull(recognizers);
            assertEquals(2, recognizers.size());
        }
    }

    @Test
    void testGetSupportedEntities() throws IOException {
        try (MockServerClient client = new MockServerClient("localhost", 8080)) {
            client.when(HttpRequest.request().withMethod("GET").withPath("/supportedentities"))
              .respond(HttpResponse.response()
                .withStatusCode(200)
                .withHeader("Content-Type", "application/json")
                .withBody("[\"Entity1\", \"Entity2\"]"));

            List<String> entities = presidioAnalyzerClient.getSupportedEntities();

            assertNotNull(entities);
            assertEquals(2, entities.size());
        }
    }

    @Test
    void testAnalyzeIOException() {
        try (MockServerClient client = new MockServerClient("localhost", 8080)) {
            client.when(HttpRequest.request().withMethod("POST").withPath("/analyze"))
              .respond(HttpResponse.response()
                .withStatusCode(500)
                .withHeader("Content-Type", "application/json")
                .withBody("{\"error\": \"Internal Server Error\"}"));

            AdHocRecognizers adHocRecognizer = new AdHocRecognizers("name", "supportedLanguage", List.of(), List.of(), List.of(), "supportedEntity");
            AnalyzeRequest request = new AnalyzeRequest("field1", "field2", "field3", 0.5, List.of("item1"), true, List.of(adHocRecognizer), List.of("item2"));

            IOException exception = assertThrows(IOException.class, () -> presidioAnalyzerClient.analyze(request));
            assertEquals("status code: 500, reason phrase: Unexpected response status: 500", exception.getMessage());
        }
    }

    @Test
    void testGetRecognizersIOException() {
        try (MockServerClient client = new MockServerClient("localhost", 8080)) {
            client.when(HttpRequest.request().withMethod("GET").withPath("/recognizers"))
              .respond(HttpResponse.response()
                .withStatusCode(500)
                .withHeader("Content-Type", "application/json")
                .withBody("{\"error\": \"Internal Server Error\"}"));

            IOException exception = assertThrows(IOException.class, () -> presidioAnalyzerClient.getRecognizers());
            assertEquals("status code: 500, reason phrase: Unexpected response status: 500", exception.getMessage());
        }
    }

    @Test
    void testGetSupportedEntitiesIOException() {
        try (MockServerClient client = new MockServerClient("localhost", 8080)) {
            client.when(HttpRequest.request().withMethod("GET").withPath("/supportedentities"))
              .respond(HttpResponse.response()
                .withStatusCode(500)
                .withHeader("Content-Type", "application/json")
                .withBody("{\"error\": \"Internal Server Error\"}"));

            IOException exception = assertThrows(IOException.class, () -> presidioAnalyzerClient.getSupportedEntities());
            assertEquals("status code: 500, reason phrase: Unexpected response status: 500", exception.getMessage());
        }
    }
}