package com.hexploits.oss.sdk.presidio.util;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.nio.charset.StandardCharsets;
import java.util.List;
import org.apache.hc.client5.http.HttpResponseException;
import org.apache.hc.core5.http.ClassicHttpResponse;
import org.apache.hc.core5.http.HttpEntity;
import org.apache.hc.core5.http.HttpException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class HttpClientUtilsTest {

    @Mock
    private ClassicHttpResponse mockResponse;

    @Mock
    private HttpEntity mockEntity;

    @Test
    void testListResponseHandlerSuccess() throws IOException, HttpException {
        when(mockResponse.getCode()).thenReturn(200);
        when(mockResponse.getEntity()).thenReturn(mockEntity);
        String jsonResponse = "[{\"name\":\"test\"}]";
        when(mockEntity.getContent()).thenReturn(new ByteArrayInputStream(jsonResponse.getBytes(StandardCharsets.UTF_8)));
        when(mockEntity.getContentLength()).thenReturn((long) jsonResponse.length());

        List<TestObject> result = HttpClientUtils.listResponseHandler(TestObject.class).handleResponse(mockResponse);

        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("test", result.get(0).name());
    }

    @Test
    void testListResponseHandlerError() throws IOException {
        when(mockResponse.getCode()).thenReturn(500);
        when(mockResponse.getEntity()).thenReturn(mockEntity);
        String errorResponse = "Internal Server Error";
        when(mockEntity.getContent()).thenReturn(new ByteArrayInputStream(errorResponse.getBytes(StandardCharsets.UTF_8)));

        HttpResponseException exception = assertThrows(HttpResponseException.class, () -> HttpClientUtils.listResponseHandler(TestObject.class).handleResponse(mockResponse));

        assertEquals(500, exception.getStatusCode());
        assertEquals("status code: 500, reason phrase: Unexpected response status: 500", exception.getMessage());
    }

    @Test
    void testResponseHandlerSuccess() throws IOException, HttpException {
        when(mockResponse.getCode()).thenReturn(200);
        when(mockResponse.getEntity()).thenReturn(mockEntity);
        String jsonResponse = "{\"name\":\"test\"}";
        when(mockEntity.getContent()).thenReturn(new ByteArrayInputStream(jsonResponse.getBytes(StandardCharsets.UTF_8)));
        when(mockEntity.getContentLength()).thenReturn((long) jsonResponse.length());

        TestObject result = HttpClientUtils.responseHandler(TestObject.class).handleResponse(mockResponse);

        assertNotNull(result);
        assertEquals("test", result.name());
    }

    @Test
    void testResponseHandlerError() throws IOException {
        when(mockResponse.getCode()).thenReturn(500);
        when(mockResponse.getEntity()).thenReturn(mockEntity);
        String errorResponse = "Internal Server Error";
        when(mockEntity.getContent()).thenReturn(new ByteArrayInputStream(errorResponse.getBytes(StandardCharsets.UTF_8)));

        HttpResponseException exception = assertThrows(HttpResponseException.class, () -> HttpClientUtils.responseHandler(TestObject.class).handleResponse(mockResponse));

        assertEquals(500, exception.getStatusCode());
        assertEquals("status code: 500, reason phrase: Unexpected response status: 500", exception.getMessage());
    }

    @Test
    void testPrivateConstructor() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
        Constructor<HttpClientUtils> constructor = HttpClientUtils.class.getDeclaredConstructor();
        constructor.setAccessible(true);
        HttpClientUtils instance = constructor.newInstance();
        assertNotNull(instance);
    }

    @Test
    void testListResponseHandlerStatusLessThan200() throws IOException {
        when(mockResponse.getCode()).thenReturn(199);
        when(mockResponse.getEntity()).thenReturn(mockEntity);
        String errorResponse = "Error";
        when(mockEntity.getContent()).thenReturn(new ByteArrayInputStream(errorResponse.getBytes(StandardCharsets.UTF_8)));

        HttpResponseException exception = assertThrows(HttpResponseException.class, () -> HttpClientUtils.listResponseHandler(TestObject.class).handleResponse(mockResponse));

        assertEquals(199, exception.getStatusCode());
        assertEquals("status code: 199, reason phrase: Unexpected response status: 199", exception.getMessage());
    }

    @Test
    void testResponseHandlerStatusLessThan200() throws IOException {
        when(mockResponse.getCode()).thenReturn(199);
        when(mockResponse.getEntity()).thenReturn(mockEntity);
        String errorResponse = "Error";
        when(mockEntity.getContent()).thenReturn(new ByteArrayInputStream(errorResponse.getBytes(StandardCharsets.UTF_8)));

        HttpResponseException exception = assertThrows(HttpResponseException.class, () -> HttpClientUtils.responseHandler(TestObject.class).handleResponse(mockResponse));

        assertEquals(199, exception.getStatusCode());
        assertEquals("status code: 199, reason phrase: Unexpected response status: 199", exception.getMessage());
    }

    record TestObject(String name) {

    }
}