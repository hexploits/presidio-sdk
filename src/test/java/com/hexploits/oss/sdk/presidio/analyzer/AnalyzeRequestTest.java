package com.hexploits.oss.sdk.presidio.analyzer;

import static org.junit.jupiter.api.Assertions.*;

import com.hexploits.oss.sdk.presidio.analyzer.AnalyzeRequest.Patterns;
import java.util.List;
import org.junit.jupiter.api.Test;

class AnalyzeRequestTest {

    @Test
    void testAnalyzeRequestBuilder() {
        AnalyzeRequest request = AnalyzeRequest.builder()
          .text("sample text")
          .language("en")
          .correlationId("12345")
          .scoreThreshold(0.8)
          .entities(List.of("entity1", "entity2"))
          .returnDecisionProcess(true)
          .adHocRecognizers(List.of(new AnalyzeRequest.AdHocRecognizers("name", "en", List.of(), List.of(), List.of(), "entity")))
          .context(List.of("context1", "context2"))
          .build();

        assertNotNull(request);
        assertEquals("sample text", request.text());
        assertEquals("en", request.language());
        assertEquals("12345", request.correlationId());
        assertEquals(0.8, request.scoreThreshold());
        assertEquals(2, request.entities().size());
        assertTrue(request.returnDecisionProcess());
        assertEquals(1, request.adHocRecognizers().size());
        assertEquals(2, request.context().size());
    }

    @Test
    void testAnalyzeRequestBuilderWithNullValues() {
        AnalyzeRequest request = AnalyzeRequest.builder()
          .text("sample text")
          .language("en")
          .build();

        assertNotNull(request);
        assertEquals("sample text", request.text());
        assertEquals("en", request.language());
        assertNull(request.correlationId());
        assertEquals(0.0, request.scoreThreshold());
        assertTrue(request.entities().isEmpty());
        assertFalse(request.returnDecisionProcess());
        assertTrue(request.adHocRecognizers().isEmpty());
        assertTrue(request.context().isEmpty());
    }

    @Test
    void testAnalyzeRequestBuilderAddEntity() {
        AnalyzeRequest.Builder builder = AnalyzeRequest.builder()
          .text("sample text")
          .language("en")
          .addEntity("entity1")
          .addEntity("entity2");

        AnalyzeRequest request = builder.build();

        assertNotNull(request);
        assertEquals(2, request.entities().size());
        assertEquals("entity1", request.entities().get(0));
        assertEquals("entity2", request.entities().get(1));
    }

    @Test
    void testAnalyzeRequestBuilderAddAdHocRecognizer() {
        AnalyzeRequest.AdHocRecognizers recognizer = new AnalyzeRequest.AdHocRecognizers("name", "en", List.of(), List.of(), List.of(), "entity");
        AnalyzeRequest.Builder builder = AnalyzeRequest.builder()
          .text("sample text")
          .language("en")
          .addAdHocRecognizer(recognizer);

        AnalyzeRequest request = builder.build();

        assertNotNull(request);
        assertEquals(1, request.adHocRecognizers().size());
        assertEquals("name", request.adHocRecognizers().get(0).name());
    }

    @Test
    void testAnalyzeRequestBuilderAddContext() {
        AnalyzeRequest.Builder builder = AnalyzeRequest.builder()
          .text("sample text")
          .language("en")
          .addContext("context1")
          .addContext("context2");

        AnalyzeRequest request = builder.build();

        assertNotNull(request);
        assertEquals(2, request.context().size());
        assertEquals("context1", request.context().get(0));
        assertEquals("context2", request.context().get(1));
    }

    @Test
    void testAnalyzeRequestBuilderMandatoryFields() {
        AnalyzeRequest.Builder firstBuilder = AnalyzeRequest.builder();
        NullPointerException exception = assertThrows(NullPointerException.class, firstBuilder::build);
        assertEquals("text must not be null", exception.getMessage());

        AnalyzeRequest.Builder secondBuilder = AnalyzeRequest.builder().text("sample text");
        exception = assertThrows(NullPointerException.class, secondBuilder::build);
        assertEquals("language must not be null", exception.getMessage());
    }

    @Test
    void testPatternsRecord() {
        Patterns pattern = new Patterns("patternName", "regexPattern", 0.9);

        assertNotNull(pattern);
        assertEquals("patternName", pattern.name());
        assertEquals("regexPattern", pattern.regex());
        assertEquals(0.9, pattern.score());
    }

    @Test
    void testAnalyzeRequestBuilderWithNullEntities() {
        AnalyzeRequest request = AnalyzeRequest.builder()
          .text("sample text")
          .language("en")
          .entities(null)
          .build();

        assertNotNull(request);
        assertTrue(request.entities().isEmpty());
    }

    @Test
    void testAnalyzeRequestBuilderAddNullEntity() {
        AnalyzeRequest.Builder builder = AnalyzeRequest.builder()
          .text("sample text")
          .language("en")
          .addEntity(null);

        AnalyzeRequest request = builder.build();

        assertNotNull(request);
        assertTrue(request.entities().isEmpty());
    }

    @Test
    void testAnalyzeRequestBuilderWithNullAdHocRecognizers() {
        AnalyzeRequest request = AnalyzeRequest.builder()
          .text("sample text")
          .language("en")
          .adHocRecognizers(null)
          .build();

        assertNotNull(request);
        assertTrue(request.adHocRecognizers().isEmpty());
    }

    @Test
    void testAnalyzeRequestBuilderAddNullAdHocRecognizer() {
        AnalyzeRequest.Builder builder = AnalyzeRequest.builder()
          .text("sample text")
          .language("en")
          .addAdHocRecognizer(null);

        AnalyzeRequest request = builder.build();

        assertNotNull(request);
        assertTrue(request.adHocRecognizers().isEmpty());
    }

    @Test
    void testAnalyzeRequestBuilderWithNullContext() {
        AnalyzeRequest request = AnalyzeRequest.builder()
          .text("sample text")
          .language("en")
          .context(null)
          .build();

        assertNotNull(request);
        assertTrue(request.context().isEmpty());
    }

    @Test
    void testAnalyzeRequestBuilderAddNullContext() {
        AnalyzeRequest.Builder builder = AnalyzeRequest.builder()
          .text("sample text")
          .language("en")
          .addContext(null);

        AnalyzeRequest request = builder.build();

        assertNotNull(request);
        assertTrue(request.context().isEmpty());
    }
}