package com.hexploits.oss.sdk.presidio.anonymizer;

import com.fasterxml.jackson.databind.PropertyNamingStrategies;
import com.fasterxml.jackson.databind.annotation.JsonNaming;
import com.hexploits.oss.sdk.presidio.anonymizer.strategy.AnonymizerStrategy;
import jakarta.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
public record AnonymizeRequest(
  @NotNull String text,
  @NotNull List<AnalyzerResult> analyzerResults,
  Map<String, AnonymizerStrategy> anonymizers
) {

    /**
     * Static method to initiate the builder.
     *
     * @return a new Builder instance
     */
    public static Builder builder() {
        return new Builder();
    }

    /**
     * Builder class for constructing instances of AnonymizeRequest.
     */
    public static class Builder {

        private String text;
        private List<AnalyzerResult> analyzerResults = new ArrayList<>();
        private Map<String, AnonymizerStrategy> anonymizers = new HashMap<>();

        /**
         * Sets the text to be anonymized.
         *
         * @param text the text
         * @return the builder instance
         */
        public Builder setText(@NotNull String text) {
            this.text = Objects.requireNonNull(text, "text cannot be null");
            return this;
        }

        /**
         * Sets the list of analyzer results.
         *
         * @param analyzerResults the list of AnalyzerResult
         * @return the builder instance
         */
        public Builder setAnalyzerResults(@NotNull List<AnalyzerResult> analyzerResults) {
            this.analyzerResults = new ArrayList<>(Objects.requireNonNull(analyzerResults, "analyzerResults cannot be null"));
            return this;
        }

        /**
         * Adds a single AnalyzerResult to the list.
         *
         * @param analyzerResult the AnalyzerResult to add
         * @return the builder instance
         */
        public Builder addAnalyzerResult(@NotNull AnalyzerResult analyzerResult) {
            this.analyzerResults.add(Objects.requireNonNull(analyzerResult, "analyzerResult cannot be null"));
            return this;
        }

        /**
         * Sets the anonymizers map.
         *
         * @param anonymizers the map of anonymizers
         * @return the builder instance
         */
        public Builder setAnonymizers(@NotNull Map<String, AnonymizerStrategy> anonymizers) {
            this.anonymizers = new HashMap<>(Objects.requireNonNull(anonymizers, "anonymizers cannot be null"));
            return this;
        }

        /**
         * Adds a single anonymizer to the map.
         *
         * @param key                the key for the anonymizer (e.g., ENTITY_TYPE or DEFAULT)
         * @param anonymizerStrategy the AnonymizerStrategy instance
         * @return the builder instance
         */
        public Builder addAnonymizer(@NotNull String key, @NotNull AnonymizerStrategy anonymizerStrategy) {
            this.anonymizers.put(
              Objects.requireNonNull(key, "key cannot be null"),
              Objects.requireNonNull(anonymizerStrategy, "anonymizerStrategy cannot be null")
            );
            return this;
        }

        /**
         * Builds the AnonymizeRequest instance.
         *
         * @return a new AnonymizeRequest
         * @throws IllegalStateException if any required fields are missing
         */
        public AnonymizeRequest build() {
            if (this.text == null) {
                throw new IllegalStateException("text is required");
            }
            if (this.analyzerResults == null) {
                throw new IllegalStateException("analyzerResults is required");
            }
            if (this.anonymizers == null) {
                throw new IllegalStateException("anonymizers is required");
            }
            return new AnonymizeRequest(
              this.text,
              Collections.unmodifiableList(this.analyzerResults),
              Collections.unmodifiableMap(this.anonymizers)
            );
        }
    }

    /**
     * Record representing the result of an analyzer.
     */
    @JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
    public record AnalyzerResult(
      @NotNull String entityType,
      @NotNull int start,
      @NotNull int end,
      @NotNull double score
    ) {

        /**
         * Static method to initiate the AnalyzerResult builder.
         *
         * @return a new AnalyzerResultBuilder instance
         */
        public static AnalyzerResultBuilder builder() {
            return new AnalyzerResultBuilder();
        }

        /**
         * Builder class for constructing instances of AnalyzerResult.
         */
        public static class AnalyzerResultBuilder {

            private String entityType;
            private Integer start;
            private Integer end;
            private Double score;

            /**
             * Sets the entity type.
             *
             * @param entityType the type of the entity
             * @return the builder instance
             */
            public AnalyzerResultBuilder setEntityType(@NotNull String entityType) {
                this.entityType = Objects.requireNonNull(entityType, "entityType cannot be null");
                return this;
            }

            /**
             * Sets the start index.
             *
             * @param start the start index
             * @return the builder instance
             */
            public AnalyzerResultBuilder setStart(int start) {
                this.start = start;
                return this;
            }

            /**
             * Sets the end index.
             *
             * @param end the end index
             * @return the builder instance
             */
            public AnalyzerResultBuilder setEnd(int end) {
                this.end = end;
                return this;
            }

            /**
             * Sets the score.
             *
             * @param score the score
             * @return the builder instance
             */
            public AnalyzerResultBuilder setScore(double score) {
                this.score = score;
                return this;
            }

            /**
             * Builds the AnalyzerResult instance.
             *
             * @return a new AnalyzerResult
             * @throws IllegalStateException if any required fields are missing
             */
            public AnalyzerResult build() {
                if (this.entityType == null) {
                    throw new IllegalStateException("entityType is required");
                }
                if (this.start == null) {
                    throw new IllegalStateException("start is required");
                }
                if (this.end == null) {
                    throw new IllegalStateException("end is required");
                }
                if (this.score == null) {
                    throw new IllegalStateException("score is required");
                }
                return new AnalyzerResult(this.entityType, this.start, this.end, this.score);
            }
        }
    }
}
