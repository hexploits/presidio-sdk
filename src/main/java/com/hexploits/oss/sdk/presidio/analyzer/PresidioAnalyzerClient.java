package com.hexploits.oss.sdk.presidio.analyzer;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.hexploits.oss.sdk.presidio.util.HttpClientUtils;
import jakarta.validation.constraints.NotNull;
import java.io.IOException;
import java.util.List;
import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.ContentType;
import org.apache.hc.core5.http.io.HttpClientResponseHandler;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PresidioAnalyzerClient {

    private static final Logger log = LoggerFactory.getLogger(PresidioAnalyzerClient.class);

    private final PresidioAnalyzerClientDetails presidioAnalyzerClientDetails;
    private final ObjectMapper objectMapper;

    public PresidioAnalyzerClient(@NotNull PresidioAnalyzerClientDetails presidioAnalyzerClientDetails) {
        this.presidioAnalyzerClientDetails = presidioAnalyzerClientDetails;
        this.objectMapper = new ObjectMapper();
    }

    public record PresidioAnalyzerClientDetails(@NotNull String analyzerHost) {

    }

    public List<AnalyzeResponse> analyze(@NotNull AnalyzeRequest request) throws IOException {
        return getAnalysis(request);
    }

    public List<String> getRecognizers() throws IOException {
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpGet getRequest = new HttpGet(presidioAnalyzerClientDetails.analyzerHost + "/recognizers");
            HttpClientResponseHandler<List<String>> responseHandler = HttpClientUtils.listResponseHandler(String.class);
            return httpClient.execute(getRequest, responseHandler);
        }
    }

    public List<String> getSupportedEntities() throws IOException {
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpGet getRequest = new HttpGet(presidioAnalyzerClientDetails.analyzerHost + "/supportedentities");
            HttpClientResponseHandler<List<String>> responseHandler = HttpClientUtils.listResponseHandler(String.class);
            return httpClient.execute(getRequest, responseHandler);
        }
    }

    private List<AnalyzeResponse> getAnalysis(@NotNull AnalyzeRequest request) throws IOException {
        log.trace("Request sent for analysis: {}", request);
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpPost postRequest = new HttpPost(presidioAnalyzerClientDetails.analyzerHost + "/analyze");
            postRequest.setHeader("Content-Type", "application/json");
            final String payload = objectMapper.writeValueAsString(request);
            StringEntity entity = new StringEntity(payload, ContentType.APPLICATION_JSON);
            postRequest.setEntity(entity);
            HttpClientResponseHandler<List<AnalyzeResponse>> responseHandler = HttpClientUtils.listResponseHandler(AnalyzeResponse.class);

            return httpClient.execute(postRequest, responseHandler);
        }
    }
}
