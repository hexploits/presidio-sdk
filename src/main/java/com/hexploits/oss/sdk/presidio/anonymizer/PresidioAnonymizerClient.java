package com.hexploits.oss.sdk.presidio.anonymizer;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.hexploits.oss.sdk.presidio.analyzer.AnalyzeResponse;
import com.hexploits.oss.sdk.presidio.anonymizer.AnonymizeRequest.AnalyzerResult;
import com.hexploits.oss.sdk.presidio.anonymizer.strategy.AnonymizerStrategy;
import com.hexploits.oss.sdk.presidio.util.HttpClientUtils;
import jakarta.validation.constraints.NotNull;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.ContentType;
import org.apache.hc.core5.http.io.HttpClientResponseHandler;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PresidioAnonymizerClient {

    private static final Logger log = LoggerFactory.getLogger(PresidioAnonymizerClient.class);

    private final PresidioAnonymizerClientDetails presidioAnonymizerClientDetails;
    private final ObjectMapper objectMapper;

    public PresidioAnonymizerClient(@NotNull PresidioAnonymizerClient.PresidioAnonymizerClientDetails presidioAnonymizerClientDetails) {
        this.presidioAnonymizerClientDetails = presidioAnonymizerClientDetails;
        this.objectMapper = new ObjectMapper();
    }

    public record PresidioAnonymizerClientDetails(@NotNull String anonymizerHost) {

    }

    public AnonymizeResponse anonymize(AnonymizeRequest request) throws IOException {
        return anonymizeContent(request);
    }

    public AnonymizeResponse anonymize(@NotNull String requestText, @NotNull List<AnalyzeResponse> request) throws IOException {
        List<AnalyzerResult> results = new ArrayList<>();
        for (AnalyzeResponse analyzeResponse : request) {
            AnalyzerResult result = new AnalyzerResult(analyzeResponse.entityType(),
              analyzeResponse.start(),
              analyzeResponse.end(),
              analyzeResponse.score());
            results.add(result);
        }

        AnonymizeRequest request1 = new AnonymizeRequest(requestText, results, null);
        return anonymizeContent(request1);
    }

    public AnonymizeResponse anonymize(@NotNull String originalText, @NotNull List<AnalyzeResponse> request, Map<String, AnonymizerStrategy> anomymizersMap) throws IOException {
        List<AnalyzerResult> results = new ArrayList<>();
        for (AnalyzeResponse analyzeResponse : request) {
            AnalyzerResult result = new AnalyzerResult(analyzeResponse.entityType(),
              analyzeResponse.start(),
              analyzeResponse.end(),
              analyzeResponse.score());
            results.add(result);
        }

        AnonymizeRequest request1 = new AnonymizeRequest(originalText, results, anomymizersMap);
        return anonymizeContent(request1);
    }

    public DeanonymizeResponse deanonymize(@NotNull DeanonymizeRequest request) throws IOException {
        return deanonymizeContent(request);
    }

    public List<String> getAnonymizers() throws IOException {
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpGet getRequest = new HttpGet(presidioAnonymizerClientDetails.anonymizerHost + "/anonymizers");
            HttpClientResponseHandler<List<String>> responseHandler = HttpClientUtils.listResponseHandler(String.class);
            return httpClient.execute(getRequest, responseHandler);
        }
    }

    public List<String> getDeanonymizers() throws IOException {
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpGet getRequest = new HttpGet(presidioAnonymizerClientDetails.anonymizerHost + "/deanonymizers");
            HttpClientResponseHandler<List<String>> responseHandler = HttpClientUtils.listResponseHandler(String.class);
            return httpClient.execute(getRequest, responseHandler);
        }
    }

    private AnonymizeResponse anonymizeContent(AnonymizeRequest request) throws IOException {
        log.trace("Request sent to anonymize: {}", request);
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpPost postRequest = new HttpPost(presidioAnonymizerClientDetails.anonymizerHost + "/anonymize");
            postRequest.setHeader("Content-Type", "application/json");
            final String payload = objectMapper.writeValueAsString(request);
            StringEntity entity = new StringEntity(payload, ContentType.APPLICATION_JSON);
            postRequest.setEntity(entity);
            HttpClientResponseHandler<AnonymizeResponse> responseHandler = HttpClientUtils.responseHandler(AnonymizeResponse.class);

            return httpClient.execute(postRequest, responseHandler);
        }
    }

    private DeanonymizeResponse deanonymizeContent(DeanonymizeRequest request) throws IOException {
        log.trace("Request sent to deanonymize: {}", request);
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpPost postRequest = new HttpPost(presidioAnonymizerClientDetails.anonymizerHost + "/deanonymize");
            postRequest.setHeader("Content-Type", "application/json");
            final String payload = objectMapper.writeValueAsString(request);
            StringEntity entity = new StringEntity(payload, ContentType.APPLICATION_JSON);
            postRequest.setEntity(entity);
            HttpClientResponseHandler<DeanonymizeResponse> responseHandler = HttpClientUtils.responseHandler(DeanonymizeResponse.class);

            return httpClient.execute(postRequest, responseHandler);
        }
    }
}
