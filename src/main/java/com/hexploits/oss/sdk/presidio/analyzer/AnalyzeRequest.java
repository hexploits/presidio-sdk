package com.hexploits.oss.sdk.presidio.analyzer;

import com.fasterxml.jackson.databind.PropertyNamingStrategies;
import com.fasterxml.jackson.databind.annotation.JsonNaming;
import jakarta.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
public record AnalyzeRequest(
  @NotNull String text,
  @NotNull String language,
  String correlationId,
  double scoreThreshold,
  List<String> entities,
  boolean returnDecisionProcess,
  List<AdHocRecognizers> adHocRecognizers,
  List<String> context
) {

    @JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
    public record AdHocRecognizers(
      String name,
      String supportedLanguage,
      List<Patterns> patterns,
      List<String> denyList,
      List<String> context,
      String supportedEntity
    ) {

    }

    public record Patterns(
      String name,
      String regex,
      double score
    ) {

    }

    /**
     * Creates a new Builder instance for constructing AnalyzeRequest objects.
     *
     * @return a new Builder
     */
    public static Builder builder() {
        return new Builder();
    }

    /**
     * Builder class for constructing instances of AnalyzeRequest.
     */
    public static class Builder {

        private String text;
        private String language;
        private String correlationId;
        private double scoreThreshold;
        private List<String> entities = new ArrayList<>();
        private boolean returnDecisionProcess;
        private List<AdHocRecognizers> adHocRecognizers = new ArrayList<>();
        private List<String> context = new ArrayList<>();

        /**
         * Sets the mandatory text field.
         *
         * @param text the text to analyze
         * @return the Builder instance
         */
        public Builder text(@NotNull String text) {
            this.text = text;
            return this;
        }

        /**
         * Sets the mandatory language field.
         *
         * @param language the language of the text
         * @return the Builder instance
         */
        public Builder language(@NotNull String language) {
            this.language = language;
            return this;
        }

        /**
         * Sets the optional correlation ID.
         *
         * @param correlationId the correlation ID
         * @return the Builder instance
         */
        public Builder correlationId(String correlationId) {
            this.correlationId = correlationId;
            return this;
        }

        /**
         * Sets the score threshold.
         *
         * @param scoreThreshold the score threshold
         * @return the Builder instance
         */
        public Builder scoreThreshold(double scoreThreshold) {
            this.scoreThreshold = scoreThreshold;
            return this;
        }

        /**
         * Sets the list of entities.
         *
         * @param entities the list of entities
         * @return the Builder instance
         */
        public Builder entities(List<String> entities) {
            if (entities != null) {
                this.entities = new ArrayList<>(entities);
            }
            return this;
        }

        /**
         * Adds a single entity to the entities list.
         *
         * @param entity the entity to add
         * @return the Builder instance
         */
        public Builder addEntity(String entity) {
            if (entity != null) {
                this.entities.add(entity);
            }
            return this;
        }

        /**
         * Sets whether to return the decision process.
         *
         * @param returnDecisionProcess flag to return decision process
         * @return the Builder instance
         */
        public Builder returnDecisionProcess(boolean returnDecisionProcess) {
            this.returnDecisionProcess = returnDecisionProcess;
            return this;
        }

        /**
         * Sets the list of ad-hoc recognizers.
         *
         * @param adHocRecognizers the list of ad-hoc recognizers
         * @return the Builder instance
         */
        public Builder adHocRecognizers(List<AdHocRecognizers> adHocRecognizers) {
            if (adHocRecognizers != null) {
                this.adHocRecognizers = new ArrayList<>(adHocRecognizers);
            }
            return this;
        }

        /**
         * Adds a single ad-hoc recognizer to the list.
         *
         * @param recognizer the ad-hoc recognizer to add
         * @return the Builder instance
         */
        public Builder addAdHocRecognizer(AdHocRecognizers recognizer) {
            if (recognizer != null) {
                this.adHocRecognizers.add(recognizer);
            }
            return this;
        }

        /**
         * Sets the list of context strings.
         *
         * @param context the list of context strings
         * @return the Builder instance
         */
        public Builder context(List<String> context) {
            if (context != null) {
                this.context = new ArrayList<>(context);
            }
            return this;
        }

        /**
         * Adds a single context string to the context list.
         *
         * @param ctx the context string to add
         * @return the Builder instance
         */
        public Builder addContext(String ctx) {
            if (ctx != null) {
                this.context.add(ctx);
            }
            return this;
        }

        /**
         * Builds and returns an instance of AnalyzeRequest.
         *
         * @return a new AnalyzeRequest instance
         * @throws NullPointerException if mandatory fields are not set
         */
        public AnalyzeRequest build() {
            // Validate mandatory fields
            Objects.requireNonNull(text, "text must not be null");
            Objects.requireNonNull(language, "language must not be null");

            // Create unmodifiable copies of lists to ensure immutability
            List<String> unmodifiableEntities = Collections.unmodifiableList(new ArrayList<>(entities));
            List<AdHocRecognizers> unmodifiableAdHocRecognizers = Collections.unmodifiableList(new ArrayList<>(adHocRecognizers));
            List<String> unmodifiableContext = Collections.unmodifiableList(new ArrayList<>(context));

            return new AnalyzeRequest(
              text,
              language,
              correlationId,
              scoreThreshold,
              unmodifiableEntities,
              returnDecisionProcess,
              unmodifiableAdHocRecognizers,
              unmodifiableContext
            );
        }
    }
}
