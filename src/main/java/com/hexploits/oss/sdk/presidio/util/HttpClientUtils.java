package com.hexploits.oss.sdk.presidio.util;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.stream.Collectors;
import org.apache.hc.client5.http.HttpResponseException;
import org.apache.hc.core5.http.io.HttpClientResponseHandler;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public final class HttpClientUtils {

    private static final Logger log = LoggerFactory.getLogger(HttpClientUtils.class);
    private static final ObjectMapper objectMapper = new ObjectMapper();

    private HttpClientUtils() {

    }

    public static <T> HttpClientResponseHandler<List<T>> listResponseHandler(Class<T> elementClazz) {
        return response -> {
            final int status = response.getCode();
            log.debug("Response: {} - {}", response.getReasonPhrase(), status);
            if (status >= 200 && status < 300) {
                String responseBody = EntityUtils.toString(response.getEntity());

                return objectMapper.readValue(responseBody,
                  objectMapper.getTypeFactory().constructCollectionType(List.class, elementClazz));
            } else {
                log.trace("Error response from Presidio API - attempting to parse response entity.");
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))) {
                    log.error("Error when making request: {} - {} - {}",
                      response.getReasonPhrase(),
                      status,
                      reader.lines().collect(Collectors.joining("\n")));
                }

                throw new HttpResponseException(status, "Unexpected response status: " + status);
            }
        };
    }

    public static <T> HttpClientResponseHandler<T> responseHandler(Class<T> elementClazz) {
        return response -> {
            final int status = response.getCode();
            log.debug("Response: {} - {}", response.getReasonPhrase(), status);
            if (status >= 200 && status < 300) {
                String responseBody = EntityUtils.toString(response.getEntity());

                return objectMapper.readValue(responseBody, elementClazz);
            } else {
                log.trace("Error response from Presidio API - attempting to parse response entity.");
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))) {
                    log.error("Error when making request: {} - {} - {}",
                      response.getReasonPhrase(),
                      status,
                      reader.lines().collect(Collectors.joining("\n")));
                }

                throw new HttpResponseException(status, "Unexpected response status: " + status);
            }
        };
    }
}
